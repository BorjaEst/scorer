%%%-------------------------------------------------------------------
%%% @author borja
%%% @doc
%%%
%%% @end
%%%-------------------------------------------------------------------
-module(scorer).
-author("borja").

%% API
-export([new_group/0, remove_group/1]). 
-export([new_pool/1, remove_pool/1, add_score/3, get_score/2]).
-export_types([]).

-type group() :: term().
-type pool()  :: term().


%%====================================================================
%% API
%%====================================================================

%%--------------------------------------------------------------------
%% @doc Creates a new gen_event for a group to run the new handlers.
%% @end
%%--------------------------------------------------------------------
-spec new_group() -> {ok, group()} .
new_group() -> scorer_sup:start_group().

%%--------------------------------------------------------------------
%% @doc Removes a group.
%% @end
%%--------------------------------------------------------------------
-spec remove_group(group()) -> ok.
remove_group(Group) -> scorer_sup:stop_group(Group).

%%--------------------------------------------------------------------
%% @doc Creates a new score table suscribed to the defined groups.
%% @end
%%--------------------------------------------------------------------
-spec new_pool([group()]) -> pool().
new_pool(Groups) -> 
    {ok, Pool} = scorer_sup:start_pool(),
    [ok = score_handler:subscribe(G, Pool) || G <- Groups],
    {ok, Pool}.

%%--------------------------------------------------------------------
%% @doc Removes a pool.
%% @end
%%--------------------------------------------------------------------
-spec remove_pool(pool()) -> ok.
remove_pool(Pool) -> scorer_sup:stop_pool(Pool).

%%--------------------------------------------------------------------
%% @doc Add the points to the pid in a group.
%% @end
%%--------------------------------------------------------------------
-spec add_score(group(), Pid :: pid(), Points :: float()) -> ok.
add_score(Group, Pid, Points) -> 
    score_handler:add_score(Group, Pid, Points). 

%%--------------------------------------------------------------------
%% @doc Gets the pid score in a pool.
%% @end
%%--------------------------------------------------------------------
-spec get_score(pool(), Of :: pid()) -> Score :: float().
get_score(Pool, Pid) -> 
    score_pool:get_score(Pool, Pid).


%%====================================================================
%% Internal functions
%%====================================================================


%%====================================================================
%% Eunit white box tests
%%====================================================================

% -------------------------------------------------------------------
% TESTS DESCRIPTIONS ------------------------------------------------

% -------------------------------------------------------------------
% SPECIFIC SETUP FUNCTIONS ------------------------------------------

% -------------------------------------------------------------------
% ACTUAL TESTS ------------------------------------------------------

% -------------------------------------------------------------------
% SPECIFIC HELPER FUNCTIONS -----------------------------------------

